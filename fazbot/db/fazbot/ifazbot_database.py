from __future__ import annotations
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Protocol, TYPE_CHECKING

if TYPE_CHECKING:
    from sqlalchemy.ext.asyncio import AsyncEngine, AsyncConnection, AsyncSession
    from .model import BaseModel
    from .repository import BannedUserRepository, WhitelistedGuildRepository

class IFazbotDatabase(Protocol):
    @property
    def banned_user_repository(self) -> BannedUserRepository: ...
    @property
    def whitelisted_guild_repository(self) -> WhitelistedGuildRepository: ...
    @asynccontextmanager
    async def enter_connection(self) -> AsyncGenerator[AsyncConnection, None]: ...
    @asynccontextmanager
    async def enter_session(self) -> AsyncGenerator[AsyncSession, None]: ...
    @asynccontextmanager
    async def must_enter_connection(self, connection: AsyncConnection | None = None) -> AsyncGenerator[AsyncConnection, None]: ...
    @asynccontextmanager
    async def must_enter_session(self, session: AsyncSession | None = None) -> AsyncGenerator[AsyncSession, None]: ...
    async def create_all(self) -> None: ...
    @property
    def engine(self) -> AsyncEngine: ...
    @property
    def driver(self) -> str: ...
    @property
    def user(self) -> str: ...
    @property
    def password(self) -> str: ...
    @property
    def host(self) -> str: ...
    @property
    def database(self) -> str: ...
    @property
    def base_model(self) -> BaseModel: ...
